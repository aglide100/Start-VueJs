<!DOCTYPE html>
<html>
  <head>
    <title>dom의 attr을 bind하는 예제 입니다.</title>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <style>
      @import "common.css";
    </style>
  </head>
  <body>
    <div id="root">
      <ul class="list">
        <li v-for="(item, index) in list" v-bind:id="index" v-on:click="greet">
          {{ item }} {{ index }}
        </li>
      </ul>
      <hr />
      <ul class="list">
        <!-- 특별한 경우를 제외한다면 key를 바인딩해주는 것이 이상적입니다. -->
        <!-- key를 바인딩하지 않아도 큰 문제는 없지만 크기가 커지거나 복잡해질 경우 퍼포먼스가 떨어지거나 예상치 못한 버그가 생길 수 있습니다. -->
        <!-- 이러한 이유는 vue의 v-for의 동작원리에 있는데 vue는 기본적으로 in-place patch으로 적절한 인덱스에 요소들을 패치하는 과정으로 요소의 위치를 기억하는데 -->
        <!-- 앱이 정적이고 간단한 구조라면 그리 큰 문제는 안되지만 동적으로 데이터가 변경되면서 구조나 dom까지 바뀐다면 key를 지정해주는 것이 이상적입니다.  -->
        <li
          v-for="(item, index) in info"
          v-bind:key="index"
          :id="item"
          @click="foo"
        >
          {{ item.name }} 의 색은 {{ item.color }} 입니다.
        </li>
      </ul>

      <hr />

      <!-- dom속성또한 바인딩이 가능합니다.  -->
      <input :type="formType.text" />
      <br />
      <input :type="formType.date" />
    </div>
  </body>
  <script>
    const app = new Vue({
      name: "test",
      el: "#root",
      data: {
        formType: { text: "text", date: "date" },
        info: [
          { name: "apple", color: "red" },
          { name: "banana", color: "yellow" },
          { name: "orange", color: "orange" },
          { name: "strawberry", color: "red" },
        ],
        list: ["banana", "apple", "orange", "strawberry"],
      },

      methods: {
        greet: function (event) {
          alert(event.currentTarget.id);
          console.log("현재 dom의 id: " + event.currentTarget.id);
        },
        foo() {
          var num = this.$data.item;

          alert(num.name, num.color);
          console.log(num);
        },
      },
    });
  </script>
</html>
